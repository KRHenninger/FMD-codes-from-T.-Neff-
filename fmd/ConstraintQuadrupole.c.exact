/**

  \file ConstraintQuadrupole.c

  Constrain Mass Quadrupole


  (c) 2003 Thomas Neff

*/

#include <math.h>
#include <complex.h>

#include "Gaussian.h"
#include "gradGaussian.h"
#include "SlaterDet.h"
#include "gradSlaterDet.h"

#include "Constraint.h"
#include "ConstraintQuadrupole.h"

#include "numerics/cmath.h"


Constraint ConstraintQ2 = {
  val : 0.0,
  label : "sQ2",
  me : calcConstraintQ2,
  gradme : calcgradConstraintQ2,
  output : outputConstraintQ2
};

Constraint ConstraintDetQ = {
  val : 0.0,
  label : "cdetQ",
  me : calcConstraintDetQ,
  gradme : calcgradConstraintDetQ,
  output : outputConstraintDetQ
};


typedef struct {
  int A;
  double q[9];
} quadrupolepara;


static void ob_quadrupole(const SlaterDet* Q,
			  const Gaussian*G1, const Gaussian* G2, 
			  const GaussianAux* X, 
			  complex double q[9])
{
  int A=Q->A;
  int i,j;

  for (j=0; j<3; j++) {
    for (i=0; i<3; i++)
      q[i+j*3] += 3*(1.0-1.0/A)*X->rho[i]*X->rho[j]*X->Q;

    q[j+j*3] += -(1.0-1.0/A)* X->rho2* X->Q; 
  }
}


static void tb_quadrupole(const SlaterDet* Q,
			  const Gaussian* G1, const Gaussian* G2, 
			  const Gaussian* G3, const Gaussian* G4, 
			  const GaussianAux* X13, const GaussianAux* X24, 
			  complex double q[9])
{
  int A=Q->A;
  int i,j;

  for (j=0; j<3; j++) {
    for (i=0; i<3; i++)
      q[i+j*3] += -3.0/A*(X13->rho[i]*X24->rho[j]+X13->rho[j]*X24->rho[i])* 
	X13->Q* X24->Q;

    q[j+j*3] += 2.0/A* cvec3mult(X13->rho, X24->rho)* X13->Q* X24->Q;
  }
}


static void gob_quadrupole(quadrupolepara* q2par,
			   const Gaussian* G1, const Gaussian* G2,
			   const GaussianAux* X, const gradGaussianAux* dX,
			   complex double* q2, gradGaussian* dq2)
{
  int A=q2par->A;
  double* q=q2par->q;
  int i,j, k;
  complex double merr;

  for (j=0; j<3; j++) {
    for (i=0; i<3; i++) {

      merr = 3*(1.0-1.0/A)*X->rho[i]*X->rho[j];
      
      *q2 += q[i+j*3]* merr *X->Q;

      for (k=0; k<2; k++)
	dq2->chi[k] +=  q[i+j*3]* merr* dX->dQ.chi[k];
      dq2->a += q[i+j*3]*
	(3*(1.0-1.0/A)*(dX->drho.a[i]*X->rho[j]+X->rho[i]*dX->drho.a[j])*X->Q+
	 merr* dX->dQ.a);
      dq2->b[i] += q[i+j*3]*
	3*(1.0-1.0/A)*dX->drho.b*X->rho[j]*X->Q;
      dq2->b[j] += q[i+j*3]*
	3*(1.0-1.0/A)*X->rho[i]*dX->drho.b*X->Q;
      for (k=0; k<3; k++) 
	dq2->b[k] += q[i+j*3]* merr* dX->dQ.b[k];
    }

    merr = (1.0-1.0/A)*X->rho2;

    *q2 += - q[j+j*3]* merr* X->Q;

    for (k=0; k<2; k++)
      dq2->chi[k] += - q[j+j*3]* merr* dX->dQ.chi[k];
    dq2->a += - q[j+j*3]* ((1.0-1.0/A)*dX->drho2.a* X->Q + merr* dX->dQ.a);
    for (k=0; k<3; k++)
      dq2->b[k] += - q[j+j*3]* 
	((1.0-1.0/A)*dX->drho2.b[k]*X->Q + merr* dX->dQ.b[k]);
  }
}


static void gtb_quadrupole(quadrupolepara* q2par,
			   const Gaussian* G1, const Gaussian* G2,
			   const Gaussian* G3, const Gaussian* G4,
			   const GaussianAux* X13, const GaussianAux* X24,
			   const gradGaussianAux* dX13,
			   complex double* q2, gradGaussian* dq2)
{
  int A=q2par->A;
  double* q=q2par->q;
  int i,j, k;
  complex double merr;

  for (j=0; j<3; j++) {
    for (i=0; i<3; i++) {

      merr = -3.0/A* (X13->rho[i]*X24->rho[j]+X13->rho[j]*X24->rho[i]);
      
      *q2 += q[i+j*3]* merr* X13->Q* X24->Q;

      for (k=0; k<2; k++)
	dq2->chi[k] +=  q[i+j*3]* merr* dX13->dQ.chi[k]* X24->Q;
      dq2->a += q[i+j*3]*
	(-3.0/A*(dX13->drho.a[i]*X24->rho[j] +
		 dX13->drho.a[j]*X24->rho[i])* X13->Q* X24->Q + 
	 merr* dX13->dQ.a* X24->Q);
      dq2->b[i] += q[i+j*3]*
	(-3.0/A)*(dX13->drho.b* X24->rho[j] +
		  dX13->drho.b* X24->rho[j])* X13->Q* X24->Q;
      for (k=0; k<3; k++) 
	dq2->b[k] += q[i+j*3]* merr* dX13->dQ.b[k]* X24->Q;
    }

    merr = 2.0/A*cvec3mult(X13->rho, X24->rho);

    *q2 += q[j+j*3]* merr* X13->Q* X24->Q;

    for (k=0; k<2; k++)
      dq2->chi[k] +=  q[j+j*3]* merr* dX13->dQ.chi[k]* X24->Q;
    dq2->a += q[j+j*3]* 
      (2.0/A*cvec3mult(dX13->drho.a, X24->rho)*X13->Q*X24->Q + 
       merr* dX13->dQ.a* X24->Q);
    for (k=0; k<3; k++)
      dq2->b[k] += q[j+j*3]* 
	(2.0/A*dX13->drho.b* X24->rho[k]* X13->Q* X24->Q + 
	 merr* dX13->dQ.b[k]* X24->Q);
  }
}


#define SQR(x) (x)*(x)

void calcConstraintQ2(const SlaterDet* Q, const SlaterDetAux* X, 
			      double* q2)
{
  double qone[9], qtwo[9], qsq = 0.0;
  int i;
  OneBodyOperator op_ob_q = {dim: 9, opt: 1, par: Q, me: ob_quadrupole};
  TwoBodyOperator op_tb_q = {dim: 9, opt: 1, par: Q, me: tb_quadrupole};


  calcSlaterDetOBME(Q, X, &op_ob_q, qone);
  calcSlaterDetTBME(Q, X, &op_tb_q, qtwo);

  for (i=0; i<9; i++)
    qsq += SQR(qone[i]+qtwo[i]);

  *q2 = sqrt(qsq);
}


void calcgradConstraintQ2(const SlaterDet* Q, const SlaterDetAux* X,
			  const gradSlaterDetAux* dX,
			  gradSlaterDet* dq2)
{
  double qone[9], qtwo[9], q[9], qsq = 0.0;
  int i;
  quadrupolepara q2par;

  OneBodyOperator op_ob_q = {dim: 9, opt: 1, par: Q, me: ob_quadrupole};
  TwoBodyOperator op_tb_q = {dim: 9, opt: 1, par: Q, me: tb_quadrupole};


  calcSlaterDetOBME(Q, X, &op_ob_q, qone);
  calcSlaterDetTBME(Q, X, &op_tb_q, qtwo);

  q2par.A = Q->A;
  for (i=0; i<9; i++) {
    q[i] = qone[i]+qtwo[i];
    qsq += SQR(q[i]);
  }
  
  for (i=0; i<9; i++)
    q2par.q[i] = q[i]/sqrt(qsq);

  gradOneBodyOperator gop_ob_q2 = {opt: 1, par: &q2par, me: gob_quadrupole};
  gradTwoBodyOperator gop_tb_q2 = {opt: 1, par: &q2par, me: gtb_quadrupole};


  calcgradSlaterDetOBME(Q, X, dX, &gop_ob_q2, dq2);
  calcgradSlaterDetTBME(Q, X, dX, &gop_tb_q2, dq2);
}


double outputConstraintQ2(double val)
{
  return val;
}


static double det(double R[3][3])
{
  return (R[0][0]*R[1][1]*R[2][2] + R[0][1]*R[1][2]*R[2][0] + 
          R[0][2]*R[1][0]*R[2][1] - R[0][0]*R[1][2]*R[2][1] - 
          R[0][1]*R[1][0]*R[2][2] - R[0][2]*R[1][1]*R[2][0]);
}


void calcConstraintDetQ(const SlaterDet* Q, const SlaterDetAux* X, 
			double* detq)
{
  double qone[9], qtwo[9], q[9];
  int i;
  OneBodyOperator op_ob_q = {dim: 9, opt: 1, par: Q, me: ob_quadrupole};
  TwoBodyOperator op_tb_q = {dim: 9, opt: 1, par: Q, me: tb_quadrupole};


  calcSlaterDetOBME(Q, X, &op_ob_q, qone);
  calcSlaterDetTBME(Q, X, &op_tb_q, qtwo);

  for (i=0; i<9; i++)
    q[i] = qone[i]+qtwo[i];
  
  *detq = cbrt(det(q));
}


static void adjunct(const double q[3][3], double a[3][3])
{
  int i,j;

  for (j=0; j<3; j++)
    for (i=0; i<3; i++)
      a[i][j] = 
	q[(j+1)%3][(i+1)%3]*q[(j+2)%3][(i+2)%3]-
	q[(j+1)%3][(i+2)%3]*q[(j+2)%3][(i+1)%3];
}


void calcgradConstraintDetQ(const SlaterDet* Q, const SlaterDetAux* X,
			    const gradSlaterDetAux* dX,
			    gradSlaterDet* ddetq)
{
  double qone[9], qtwo[9], q[9], detq, adjq[9];
  int i;
  quadrupolepara q2par;

  OneBodyOperator op_ob_q = {dim: 9, opt: 1, par: Q, me: ob_quadrupole};
  TwoBodyOperator op_tb_q = {dim: 9, opt: 1, par: Q, me: tb_quadrupole};


  calcSlaterDetOBME(Q, X, &op_ob_q, qone);
  calcSlaterDetTBME(Q, X, &op_tb_q, qtwo);

  q2par.A = Q->A;
  for (i=0; i<9; i++)
    q[i] = qone[i]+qtwo[i];

  detq = det(q);
  adjunct(q, adjq);

  for (i=0; i<9; i++)
    q2par.q[i] = 1.0/(3*SQR(cbrt(detq)))*adjq[i];

  gradOneBodyOperator gop_ob_detq = {opt: 1, par: &q2par, me: gob_quadrupole};
  gradTwoBodyOperator gop_tb_detq = {opt: 1, par: &q2par, me: gtb_quadrupole};


  calcgradSlaterDetOBME(Q, X, dX, &gop_ob_detq, ddetq);
  calcgradSlaterDetTBME(Q, X, dX, &gop_tb_detq, ddetq);
}


double outputConstraintDetQ(double val)
{
  return 3*val;
}
